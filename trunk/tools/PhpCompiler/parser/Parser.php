<?php
/*
 Copyright (c) 2014 Open Autonomy Inc.
 
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:
 
 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.
 
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
*/
require_once('LexerFilter.php');


// Author:  Jeff Disher (Open Autonomy Inc.)
// This class represents the parser of the compiler which converts the leaf parse element stream provided by the lexer
//  into a parse tree which can be visited for direct manipulation or converted into a richer abstract syntax tree by
//  other components.
// It is configured with the XML output of Bison when run on our grammar file.  This means that it expects to be built,
//  at run time, by another component which is interpreting that file.  Hence, it is created with no rules or states.
class OA_Parser
{
	private $rules;
	private $states;
	
	
	// Returns an empty parser which must have rules and states added to it, prior to use.
	public function __construct()
	{
		$this->rules = array();
		$this->states = array();
	}
	
	// Parses the token stream generated by $rawLexer.
	// Returns the accepted parse tree root node.
	public function parse($rawLexer)
	{
		assert($rawLexer instanceof OA_Lexer);
		$lexer = new OA_LexerFilter($rawLexer);
		$symbolStack = array();
		// Start with a 0 pushed on the state stack to avoid special cases.
		$stateStack = array('0');
		$acceptedTree = null;
		
		while (null === $acceptedTree)
		{
			$token = $lexer->peakNextToken();
			assert($token instanceof OA_LexerToken);
			$currentStateNumber = $stateStack[count($stateStack) - 1];
			$symbol = $token->getName();
			
			// Check shift rules and reduction rules for our current state.
			$currentStateObject = $this->states[$currentStateNumber];
			$shiftState = $currentStateObject->getShiftForSymbol($symbol);
			if (null !== $shiftState)
			{
				assert(is_string($shiftState));
				$lexer->acceptToken();
				array_push($symbolStack, $token);
				array_push($stateStack, $shiftState);
			}
			else
			{
				$reductionNumber = $currentStateObject->getReductionForSymbol($symbol);
				if (null !== $reductionNumber)
				{
					$shouldAccept = false;
					// Handle the case where the "accept" reduction actually means "rule 0".
					if ('accept' === $reductionNumber)
					{
						$shouldAccept = true;
						$reductionNumber = 0;
					}
					assert(isset($this->rules[$reductionNumber]));
					$reductionRule = $this->rules[$reductionNumber];
					$consumedCount = $reductionRule->consumedCount();
					assert($consumedCount <= count($symbolStack));
					assert($consumedCount < count($stateStack));
					$argArray = array();
					for ($i = 0; $i < $consumedCount; ++$i)
					{
						$arg = array_pop($symbolStack);
						array_pop($stateStack);
						array_unshift($argArray, $arg);
					}
					$tree = $reductionRule->applyRule($argArray);
					assert($tree instanceof OA_ParseTree);
					
					if ($shouldAccept)
					{
						$acceptedTree = $tree;
					}
					else
					{
						// Consult the goto map of the new state we are falling back to before pushing this onto our
						//  stack.
						$newStateObject = $this->states[$stateStack[count($stateStack) - 1]];
						$gotoState = $newStateObject->getGotoForSymbol($tree->getName());
						assert(null !== $gotoState);
						array_push($symbolStack, $tree);
						array_push($stateStack, $gotoState);
					}
				}
				else
				{
					error_log("UNEXPECTED $symbol (\"{$token->getText()}\") {$token->getFile()}:{$token->getLine()}");
					assert(false);
				}
			}
		}
		assert(0 === count($symbolStack));
		assert(1 === count($stateStack));
		return $acceptedTree;
	}
	
	// Adds the given $ruleObject to the parser, resolved by its given $number.
	public function addRule($number, $ruleObject)
	{
		assert($ruleObject instanceof OA_ParserRule);
		$this->rules[$number] = $ruleObject;
	}
	
	// Adds the given $stateObject to the parser, entered at its given $number.
	public function addState($number, $stateObject)
	{
		assert($stateObject instanceof OA_ParserState);
		$this->states[$number] = $stateObject;
	}
}

?>
